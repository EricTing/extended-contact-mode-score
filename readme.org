* eXtended Contact Mode Score (xCMS)
Extend the application of Contact Mode Score to non-identical complexes

** Methods
1. Contact Matrix
   1. Corresponding residues of two binding pockets
      1. [X] <<<subject>>>
         1. [X] Ligands of two pockets have a Tc >= 0.5
         2. [X] Sequence similarity < 30% between the two associated proteins
         3. [X] shaore >= 50 atmic ligand-protein contacts of same type
         4. [X] the pdb files provided by Apoc contains only C_alpha atoms
   2. [X] coordinates of the effective points
      1. use the pdb files downloaded from PDB to grep the proteins' residues
      2. use the mixed resolution as in the CMS
      3. use the <<<virtual effective>>> points to compensate for miss-matched residues
         1. the contact between a ligand atom and a virtual effective point is always *None*
      4. [X] retrieve the ligand from mmCIF file and convert to mol2 format
         1. [X] can tag such as "3zyc_GCP_A_1749" uniquely identify a ligand from the pdb file?
            Yes, but it is not safe to do so in a pdb file
         2. [X] check out
            1. [X] Python PDBx
            2. [X] BioPython
            3. [X] OpenBabel c++ library
               1. residue names become "LIG" when read by babel
               2. [X] how babel parse the mmCIF file?
                  hacked the parser in babel for mmCIF in ordr to retrieve auth* fields
   3. [ ] certain ligands cannot be grepped
      e.g. 3q2k_NAD_P_500
   4. [ ] certain pdbs miss some atoms
      1. in /ddnB/work/jaydy/dat/pdb/vn/pdb3vn9.ent
         | ATOM | 674 | N  | GLU | A | 130 | -2.316 | -44.226 | 2.992 | 1.00 |  90.63 | N |
         | ATOM | 675 | CA | GLU | A | 130 | -1.581 | -44.192 | 4.257 | 1.00 |  83.49 | C |
         | ATOM | 676 | C  | GLU | A | 130 | -1.888 | -42.913 | 5.017 | 1.00 | 100.53 | C |
         | ATOM | 677 | O  | GLU | A | 130 | -2.031 | -41.844 | 4.392 | 1.00 |  97.24 | O |
         | ATOM | 678 | CB | GLU | A | 130 | -0.072 | -44.310 | 4.027 | 1.00 |  73.44 | C |
      2. in /ddnB/work/jaydy/dat/pdb/t9/pdb3t9a.ent
         | ATOM | 1612 | N   | GLU | A | 238 |  8.315 | -2.250 | 6.872 | 1.00 | 21.85 | N |
         | ATOM | 1613 | CA  | GLU | A | 238 |  9.731 | -2.356 | 7.160 | 1.00 | 23.40 | C |
         | ATOM | 1614 | C   | GLU | A | 238 | 10.257 | -0.984 | 7.551 | 1.00 | 23.08 | C |
         | ATOM | 1615 | O   | GLU | A | 238 |  9.910 |  0.026 | 6.922 | 1.00 | 22.77 | O |
         | ATOM | 1616 | CB  | GLU | A | 238 | 10.506 | -2.904 | 5.947 | 1.00 | 23.90 | C |
         | ATOM | 1617 | CG  | GLU | A | 238 | 10.539 | -1.968 | 4.735 | 1.00 | 27.61 | C |
         | ATOM | 1618 | CD  | GLU | A | 238 | 11.471 | -2.450 | 3.608 | 1.00 | 32.44 | C |
         | ATOM | 1619 | OE1 | GLU | A | 238 | 12.400 | -3.248 | 3.888 | 1.00 | 35.07 | O |
         | ATOM | 1620 | OE2 | GLU | A | 238 | 11.268 | -2.020 | 2.448 | 1.00 | 32.92 | O |
      3. problem resolved if by using virtual effective points
   5. list file from apoc contains weird keys words such as "### XYM 35"
      1. original
         /ddnB/work/jaydy/dat/apoc/RS2.lst
      2. cleaned
         /work/jaydy/dat/apoc/RS2_valid.lst
   6. Corresponding heavy atoms of two ligands
      1. Kcombu (currently used)
      2. SIMCOMP (used in Apoc paper)
         <<<SIMCOMP>>> tend to yield higher Tc than <<<pkcombu>>>

** Pipeline
1. Original pdb file for the complex
   1. apoc_inputs.PdbPathTask
   2. apoc_inputs.DecompressedPdb
2. Grep Ligand atoms from the pdb
   1. apoc_inputs.LigandExpStructureInPdb
3. Run apoc
   1. run_control_apoc.LpcApocResultTask
4. Run kcombu
   1. run_control_apoc.LpcKcombuResult
5. Parsers
   1. run_control_apoc.ApocResultParer
   2. run_control_apoc.PkcombuAtomMatchParser
6. Run xcms
   1. xcms.LpcApocXcms
7. Collect data for analysis
   1. collect_xcms.AtomicXcmsCollection
   2. collect_xcms.AtomicXcmsTable

** [#A] xCms back compatible with Cms
The value of xCms should be <<<back-compatible>>> with Cms.
1. materials
   complexes in the Astext dataset
2. methods
   1. apply rotation and translation to each ligand
      1. to calculate Cms for each complex
         1. calculate the Cms between the variational conformations and the native conformation
      2. to calculate xCms for eac complex
         1. find the neighboring residues in contact with ligand atoms
         2. align the neighboring residues using Apoc
         3. for the matching residues from Apoc, add virtual points
         4. calculate the xCms between the variational conformations and the native conformation

** [#A] Statistical significance of cms
1. run MC for each complex in astex with weak constraints
   1. vdw * 0.5
2. cluster the conformations based on their translational and rotational vector
   1. [X] experiment with DBSCAN
      1. do not use DBSCAN becuase it removes the outliers
   2. [X] experiment with KMeans
      1. Kmeans maintain the density distribution as the original ponts
   3. experiment with the grid method
      1. [X] grid method provides evenly distributed points
      2. [ ] in bining the points, use the median point as the center
         1. Be careful with rotational angles; they *DO NOT* conform to vector calculation
            1. [ ] experiment with not bining the rotational angles
3. calculate pair-wise p-value
4. sample
   1. [X] stratefied sampling
      Assume that the # of grid cells is n,
      the # of samples from each complex is \propto to n^2
5. [ ] dependence on the ligand size and the protein size
6. [ ] analyze the distribution of the cms values


** [#B] Statistical significance of xcms value
*** Run on a random dataset
1. Random set (<<<RS2>>>) from Apoc
   /ddnB/work/jaydy/dat/apoc/RS2.lst
   /ddnB/work/jaydy/dat/apoc/RS2_valid.lst
2. script
   ./src/run_lpc_randomset.py
3. [X] run time errors
   Cannot do much about the errors below because of the in-perfection of the source of data.
   1. missing pdb files
      /ddnB/work/jaydy/dat/apoc/missing_pdbs.txt
   2. protein pairs that have mis-matched elements
      /ddnB/work/jaydy/dat/apoc/mis_matched_prt.txt
   3. kcombu failures
      /ddnB/work/jaydy/dat/apoc/kcombu_failures.txt
4. [ ] curate <<<dataset>>>
   1. [ ] calculate the all-against-all apoc, kcombu using the successful pockets dataset
   2. [ ] cluster using DBSCAN based on the ps-score and Tc between two pockets
      1. \sqrt{ps-score^2 + Tc^2} --> similarity
      2. or use the product directly
      3. similarity(ps-score = 0.4, Tc = 0.4) --> eps
   3. [ ] use the centroids' xcms to calculate the statistical significance
5. curate subject
   ./src/curate.py
   ./src/run_curate.py
   1. dbscan for subject dataset
      |  eps | #clusters |
      |------+-----------|
      |  1.0 |      1070 |
      |  1.1 |       764 |
      | 1.15 |       620 |
      |  1.2 |       406 |
      |  1.3 |       103 |


* DONE Assess AutoVina on DUDE
CLOSED: [2016-02-24 Wed 14:20]

** DONE Presumption
CLOSED: [2016-02-12 Fri 14:39]
Similar ligand and pockets yield high spearmanr between the distance vectors

*** DONE Prove
CLOSED: [2016-02-12 Fri 14:38]
1. [X] Use BioLip's structure to query
2. [X] Cluster the ligands in BioLip
3. [X] do the clustering of the proteins using CD-HIT?
   http://weizhongli-lab.org/cd-hit/
   #+BEGIN_SRC python
     # generate fasta sequence from pdb file
     import pybel
     prt = pybel.readfile('pdb', "/ddnB/work/jaydy/dat/BioLip/prt/01/101mA.pdb").next()
     fasta_str = prt.write('fasta')
   #+END_SRC
     No, because we will rank the templates
4. [X] find how spearmanr evolves with ps_score and TC

** DONE Use mutiple template pockets and ligands
CLOSED: [2016-02-12 Fri 14:39]
1. Non-redundant dataset of proteins and ligands
   http://zhanglab.ccmb.med.umich.edu/BioLiP/download.html
   1. filter the ligands with
      1. size constraints (6 < size)
      2. [X] tanimoto coefficients > 0.5 (using FastSearch in OpenBabel http://openbabel.org/wiki/FastSearch)
         Note that pkcombu and babel gives different tanimoto coefficients for the same ligand pair
   2. [X] Index the ligands
      1. [X] use only small ligands with #atom < 999
      2. [X] /home/jaydy/Workspace/Bitbucket/xcms/src/ligand_nr.bash
      3. [X] /home/jaydy/Workspace/Bitbucket/xcms/src/apc_pbs/wq_ligand_nr.pbs
   3. [X] Index
      #+BEGIN_SRC sh
        cd /ddnB/work/jaydy/dat/BioLip/
        babel ligand_nr.sdf -ofs
        # results are written to /ddnB/work/jaydy/dat/BioLip/ligand_nr.fs
      #+END_SRC
   4. [X] Search
      #+BEGIN_SRC sh
        # example command
        cd /work/jaydy/dat/BioLip
        babel ligand_nr.fs outfile.sdf -s ./sml_ligand_nr/08/208l_CYS_A_1.pdb -at0.5
      #+END_SRC
   5. BioLip-referenced SpearmanR

** DONE Random prediction
CLOSED: [2016-02-24 Wed 14:20]
AutoVina has an option for random prediciton of ligand within the binding site.

** DONE Random v.s. AutoVina Vina using CMS, XCMS and RMSD
CLOSED: [2016-05-05 Thu 16:21]
1. statistics
   | stas  |   rnd_xcms |  pred_xcms |    rnd_rmsd |   pred_rmsd |     rnd_cms |    pred_cms |
   |-------+------------+------------+-------------+-------------+-------------+-------------|
   | count | 699.000000 | 699.000000 | 2200.000000 | 2200.000000 | 2200.000000 | 2200.000000 |
   | mean  |   0.194438 |   0.545467 |    8.025521 |    3.660226 |    0.190847 |    0.547677 |
   | std   |   0.244270 |   0.409696 |    3.422547 |    2.808389 |    0.159145 |    0.272731 |
   | min   |  -0.547524 |  -0.474403 |    1.207914 |    0.176276 |   -0.026508 |   -0.013770 |
   | 25%   |   0.036368 |   0.203030 |    5.494956 |    1.402787 |    0.069933 |    0.308091 |
   | 50%   |   0.197694 |   0.694235 |    7.596452 |    2.889980 |    0.152046 |    0.573644 |
   | 75%   |   0.366260 |   0.912437 |   10.014924 |    5.292552 |    0.279209 |    0.798248 |
   | max   |   0.816259 |   0.993887 |   26.166285 |   17.152016 |    0.876955 |    0.987187 |

* Case studies
1. script
   ./src/superpose.py
2. cases
   | query            | template         | spearmanr |     rmsd | TM-score |      cms |  query EC | template EC |
   |------------------+------------------+-----------+----------+----------+----------+-----------+-------------|
   | 1o8b_ABF_A_1.pdb | 3bxh_F6P_A_1.pdb |  0.756368 | 1.581726 |  0.26849 | 0.774737 |   5.3.1.6 | N/A         |
   | 2yiw_YIW_A_1.pdb | 3f3u_1AW_A_1.pdb |   0.96104 | 0.420666 |  0.75643 | 0.937001 | 2.7.11.24 | 2.7.10.2    |

* DONE CMS v.s. RMSD [3/3]
CLOSED: [2016-08-07 Sun 23:06] DEADLINE: <2016-08-07 Sun>
:LOGBOOK:
CLOCK: [2016-08-07 Sun 22:59]--[2016-08-07 Sun 23:06] =>  0:07
CLOCK: [2016-08-07 Sun 17:25]--[2016-08-07 Sun 17:50] =>  0:25
CLOCK: [2016-08-07 Sun 13:38]--[2016-08-07 Sun 13:49] =>  0:11
:END:
** DONE Generate conformations [4/4]
CLOSED: [2016-08-07 Sun 17:26] SCHEDULED: <2016-08-06 Sat>
1. [X] ./src/gen_vec.py
2. [X] ./src/trace.bash
3. [X] /home/jaydy/Workspace/GitHub/geaxdock_gpu/data/trajectory.sample.out
4. [X] /work/jaydy/working/astex/rnd_confs

** DONE Calculate CMS and RMSD [3/3]
CLOSED: [2016-08-07 Sun 23:06] DEADLINE: <2016-08-07 Sun> SCHEDULED: <2016-08-06 Sat>
:LOGBOOK:
CLOCK: [2016-08-07 Sun 18:41]--[2016-08-07 Sun 19:10] =>  0:29
CLOCK: [2016-08-07 Sun 12:20]--[2016-08-07 Sun 12:31] =>  0:11
CLOCK: [2016-08-07 Sun 01:12]--[2016-08-07 Sun 01:52] =>  0:40
CLOCK: [2016-08-06 Sat 22:41]--[2016-08-06 Sat 23:15] =>  0:34
:END:

*** DONE Results of five perturbations [4/4]
CLOSED: [2016-08-07 Sun 23:03]
1. [X] ./src/cms_rmsd.bash
2. [X] /work/jaydy/working/astex/rmsd.txt
3. [X] /work/jaydy/working/astex/cms.txt
4. [X] collect and merge ligand size
   #+BEGIN_SRC python
     from collections import defaultdict
     import pandas as pd


     def collect2df(ifn, ofn):
         rmsd_dat = defaultdict(list)
         lines = open(ifn).readlines()
         for idx, line in enumerate(lines):
             if line.startswith('complex'):
                 name = line.split()[1]
                 next_16lines = lines[idx + 1:idx + 1 + 16]
                 for l in next_16lines:
                     if 'value' in l:
                         rmsd_dat[name].append(float(l.split()[-1]))

         rmsd_df = pd.DataFrame(rmsd_dat).T
         # merge ligand size ./dat/first_step_rmsd_cms.csv
         sz_df = pd.read_csv('./dat/first_step_rmsd_cms.csv', index_col=0)
         sz_df = sz_df.set_index('ligand')[['sz']]
         rmsd_df = rmsd_df.join(sz_df)
         rmsd_df.to_csv(ofn)


     rmsd_ifn = "/work/jaydy/working/astex/rmsd.txt"
     rmsd_ofn = "/home/jaydy/Workspace/GitHub/extended-contact-mode-score/dat/rmsd.txt.csv"
     collect2df(rmsd_ifn, rmsd_ofn)

     cms_ifn = "/work/jaydy/working/astex/cms.txt"
     cms_ofn = "/home/jaydy/Workspace/GitHub/extended-contact-mode-score/dat/cms.txt.csv"
     collect2df(cms_ifn, cms_ofn)

     rmsd_df = pd.read_csv(rmsd_ofn, index_col=0)
     cms_df = pd.read_csv(cms_ofn, index_col=0)
   #+END_SRC

*** DONE Timing RMSD calculation on 204 * 8 conformations
CLOSED: [2016-08-07 Sun 22:59]
| real | 0m8.364s |
| user | 0m2.011s |
| sys  | 0m3.298s |

*** DONE Timing CMS calculation on 204 * 8 conformations
CLOSED: [2016-08-07 Sun 22:59]
| real | 87m11.291s |
| user | 86m49.554s |
| sys  | 0m14.283s  |

** DONE Quartile coefficient of dispersion [3/3]
CLOSED: [2016-08-07 Sun 23:06]
1. [X] calculate
  #+BEGIN_SRC python
    import pandas as pd
    import numpy as np

    cms_df = pd.read_csv("./dat/cms.txt.csv", index_col=0)
    rmsd_df = pd.read_csv("./dat/rmsd.txt.csv", index_col=0)


    def QuantileCoef(dat):
        """
        Keyword Arguments:
        dat -- dis(similarity) values
        """
        q1, q3 = np.percentile(dat, [25, 75])
        return (q3 - q1) / (q3 + q1)


    cms_qe = {}
    for name in cms_df.columns:
        cms_qe[name] = QuantileCoef(cms_df[name])

    rmsd_qe = {}
    for name in rmsd_df.columns:
        rmsd_qe[name] = QuantileCoef(rmsd_df[name])

    print("step QuantileCoef")
    print(pd.Series(cms_qe))
    print("step QuantileCoef")
    print(pd.Series(rmsd_qe))
  #+END_SRC

2. [X] cms_qe results
   | step | QuantileCoef |
   |------+--------------|
   |    0 |     0.025457 |
   |    1 |     0.064652 |
   |    2 |     0.103793 |
   |    3 |     0.134097 |
   |    4 |     0.169521 |
   |    5 |     0.202439 |
   |    6 |     0.218099 |
   |    7 |     0.248960 |
   |   sz |     0.412429 |

3. [X] rmsd_qe results
   |------+--------------|
   | step | QuantileCoef |
   |------+--------------|
   |    0 |     0.346818 |
   |    1 |     0.296180 |
   |    2 |     0.283607 |
   |    3 |     0.274584 |
   |    4 |     0.291163 |
   |    5 |     0.288803 |
   |    6 |     0.267812 |
   |    7 |     0.281223 |
   |   sz |     0.412429 |
